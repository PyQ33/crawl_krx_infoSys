# -*- coding: utf-8 -*-
"""krx_sise.ipynb

Automatically generated by Colaboratory.

"""

import warnings

warnings.filterwarnings("ignore")
import pandas as pd
from pandas.tseries.offsets import BDay, Day
import datetime


import requests
import pandas as pd
from io import BytesIO



class custom_today:
    def today(backday=0):
        today = pd.datetime.today()
        what_date1 = today + BDay(backday)
        what_date1 = format(what_date1, "%Y%m%d")
        print(type(what_date1))
        today = what_date1
        return today

    def get_ddd():
        ddd = datetime.datetime.today().weekday()
        ddds = ['Mon','Tues','Wed','Thu','Fri','Sat','Sun']
        print(f"Today : {ddd}, {ddds[ddd]}")
        return ddd

if (custom_today.get_ddd()==0):
    back2today =-3

elif (custom_today.get_ddd()==6):
    back2today =-2
else:
    back2today = -1


def get_krxsise_date(back2today):

  print(f": ---ref Date  :{custom_today.today(back2today)}")
  # gen_otp_url = "http://data.krx.co.kr/comm/fileDn/GenerateOTP/generate.cmd"
  gen_otp_url = "http://data.krx.co.kr/comm/bldAttendant/getJsonData.cmd"

  # generate otp.jspx ? 

  gen_otp_payload ={
      'bld': 'dbms/MDC/STAT/standard/MDCSTAT01501',
      'mktId':'ALL',
      'trdDd':f"{custom_today.today(back2today)}",
      'share':'1',
      'money':'1',
      'csvxls_isNo': 'false',
      
  }


  headers ={
      'Referer': f'http://data.krx.co.kr/contents/MDC/MDI/mdiLoader/index.cmd?menuId=MDC0201020101',
      'User-Agent': 'Mozilla/5.0',
  }


      

  otp = requests.post(gen_otp_url, gen_otp_payload, headers=headers)
  # otp = str(otp.content)#[1:]
  print(f"otp: {otp.content}") #got : genterated_otp

  import json
  #otp.content
  krx_sise_obj = otp.json()
  prodid_zip = krx_sise_obj['OutBlock_1'][0]
  krx_sise_cols = prodid_zip.keys() 
  num_krx_rows = len(krx_sise_obj['OutBlock_1'])
  num_krx_cols = len(list(prodid_zip.values()))
  print(f"rows : len( krx_sise_obj['OutBlock_1'] ) : {num_krx_rows}")
  print(f"cols : len(list(prodid_zip.values()) : {num_krx_cols}")

  import numpy as np
  krx_matrix = np.zeros((num_krx_rows,num_krx_cols  ),dtype=object) # 2Darray dtype object


  for idx, prodid_zip in enumerate(krx_sise_obj['OutBlock_1']):
    if idx < 1:
      print(f"{prodid_zip.keys()}")
    elif idx < 5:
      print(f"{idx}, {list(prodid_zip.values())}")
    krx_matrix[idx] = np.array(list(prodid_zip.values()))

  # cols_kr = ['종목코드','종목명','시장구분','소속부',
  #            'close','대비','등략률','open','high','low','volume','거래대금','cap','상장주식수']
  krx_matrix_csv = pd.DataFrame(krx_matrix, columns=list(prodid_zip.keys()))
  krx_matrix_csv.rename(columns={'ISU_SRT_CD':'prodid',
                                'ISU_ABBRV':'name',
                              'MKTCAP':'cap',
                              'TDD_CLSPRC':'close',
                              'TDD_OPNPRC':'open',
                              'TDD_HGPRC':'high',
                              'TDD_LWPRC':'low',
                              },inplace=True)
  krx_matrix_csv.prodid = 'A' + krx_matrix_csv.prodid
  # -------------- Crawl Done

  # print(f"krx_matrix_csv.dtypes :{krx_matrix_csv.dtypes}")
  # print(f"krx_matrix_csv.SECT_TP_NM.unique(): {krx_matrix_csv.SECT_TP_NM.unique()}")
  try:
    krx_matrix_csv.close = krx_matrix_csv.close.str.replace(",","").astype(int)
    krx_matrix_csv.CMPPREVDD_PRC = krx_matrix_csv.CMPPREVDD_PRC.str.replace(",","").astype(int)
    krx_matrix_csv.FLUC_RT = krx_matrix_csv.FLUC_RT.str.replace(",","").astype("float16") #
    krx_matrix_csv.open = krx_matrix_csv.open.str.replace(",","").astype(int)
    krx_matrix_csv.high  =krx_matrix_csv.high.str.replace(",","").astype(int)
    krx_matrix_csv.low = krx_matrix_csv.low.str.replace(",","").astype(int)
    krx_matrix_csv.ACC_TRDVOL   =krx_matrix_csv.ACC_TRDVOL.str.replace(",","").astype(int)
    krx_matrix_csv.ACC_TRDVAL = krx_matrix_csv.ACC_TRDVAL.str.replace(",","").astype(int)
    krx_matrix_csv.cap = krx_matrix_csv.cap.str.replace(",","").astype(int)
    krx_matrix_csv.LIST_SHRS =krx_matrix_csv.LIST_SHRS.str.replace(",","").astype(int) 
  except:
    None
  string_format =f"string"
  krx_matrix_csv.prodid = krx_matrix_csv.prodid.astype(string_format)
  krx_matrix_csv.name = krx_matrix_csv.name.astype(string_format)
  krx_matrix_csv.MKT_NM =  krx_matrix_csv.MKT_NM.astype(string_format)
  krx_matrix_csv.SECT_TP_NM = krx_matrix_csv.SECT_TP_NM.astype(string_format).replace("(소속부없음)","").str.replace("기업부","").str.replace("종목","") 
  krx_matrix_csv.FLUC_TP_CD = krx_matrix_csv.FLUC_TP_CD.astype(string_format)
  krx_matrix_csv.MKT_ID =krx_matrix_csv.MKT_ID.astype(string_format)
  # print(f"krx_matrix_csv.dtypes :{krx_matrix_csv.dtypes}")

  krx_matrix_csv['Date'] = custom_today.today(back2today)
  return krx_matrix_csv

get_krxsise_date(back2today=-1)

!pip install PyMySQL #pymysql  은 실패
!python -c 'import pymysql'

import pandas as pd
import pymysql
from sqlalchemy import create_engine


item_tb = MY_TABLENAME
table_nm = item_tb
pw = MY_PASSWORD
ip_public = MY_IP
port = '3306'
db_name = MY_DBNAME
engine = create_engine("mysql+pymysql://root:" + pw + f"@{ip_public}:{port}/{db_name}?charset=utf8",
                           encoding='utf-8')

def TableDrop(item_tb):
  conn = pymysql.connect(host=ip_public, port=3306, user='root', password=pw, db=db_name,
                           charset='utf8')
  with conn.cursor() as curs:
    sql = f"drop table {item_tb}"
    curs.execute(sql)
    print(f'--- {sql} !')
    conn.commit()
    conn.close()


def TableCreater(item_tb):
    print(f''' make Table''')
    conn = pymysql.connect(host=ip_public, port=3306, user='root', password=pw, db=db_name,
                           charset='utf8')
    with conn.cursor() as curs:
        sql = f"""
        CREATE TABLE {item_tb}(
          Date Date NOT NULL,
          prodid VARCHAR(30) NOT NULL,
          name VARCHAR(30) NOT NULL,
          MKT_NM VARCHAR(30) NOT NULL,
          SECT_TP_NM VARCHAR(30) NOT NULL,
          close VARCHAR(30) NOT NULL,
          FLUC_TP_CD VARCHAR(30) NOT NULL,
          CMPPREVDD_PRC VARCHAR(30) NOT NULL,
          FLUC_RT VARCHAR(30) NOT NULL,
          open VARCHAR(30) NOT NULL,
          high VARCHAR(30) NOT NULL,
          low VARCHAR(30) NOT NULL,
          ACC_TRDVOL VARCHAR(30) NOT NULL,
          ACC_TRDVAL VARCHAR(30) NOT NULL,
          cap VARCHAR(30) NOT NULL,
          LIST_SHRS VARCHAR(30) NOT NULL,
          MKT_ID VARCHAR(30) NOT NULL,
          PRIMARY KEY(prodid, Date)
          );
          """
        #
        # Date DATE NOT NULL,
        
        curs.execute(sql)
        print(f'maked {item_tb} Table !')
        conn.commit()
        codes = dict()
        conn.close()


try:
  # TableDrop(item_tb)
  TableCreater(item_tb)
except Exception as e:
  print(e)

import time
from tqdm import tqdm
for idx, i in tqdm(enumerate(range(0, 10))): 
  try:
    krx_matrix_csv = get_krxsise_date(back2today=-1 * i)
    krx_matrix_csv.to_sql(name=f'{table_nm}', con=engine, if_exists='append', index=False)
    print(f'[{idx}/ {10}]---------------[krx_matrix_csv],[{custom_today.today(back2today)}] was inserted: \n')# {krx_matrix_csv}')
    time.sleep(0.5)
  except Exception as e:
    print(e)

def get_prodiddate_items(item_tb,  date):
  engine = create_engine("mysql+pymysql://root:" + "PW" + "@HOST/MY_DBNAME?charset=utf8",
                           encoding='utf-8')
  sql = f"""
  SELECT * FROM MY_DBNAME.{item_tb} WHERE  Date <= '{date}' and prodid = 'A005930' ORDER BY DATE ASC;
  """
  conn = engine
  result = pd.read_sql(sql, con=conn)
  
  return result

df = get_prodiddate_items(item_tb=item_tb, date='20211130')
df

"""
krx_sise_obj.keys()
> dict_keys(['OutBlock_1', 'CURRENT_DATETIME'])

krx_sise_obj['OutBlock_1'] 
> list 형임 


krx_sise_obj['OutBlock_1'][0].keys() 
> dict_keys(['ISU_SRT_CD', 'ISU_ABBRV', 'MKT_NM', 'SECT_TP_NM', 'TDD_CLSPRC', 'FLUC_TP_CD', 'CMPPREVDD_PRC', 'FLUC_RT', 'TDD_OPNPRC', 'TDD_HGPRC', 'TDD_LWPRC', 'ACC_TRDVOL', 'ACC_TRDVAL', 'MKTCAP', 'LIST_SHRS', 'MKT_ID'])
> 각 종목의   컬럼들

list(krx_sise_obj['OutBlock_1'][0].keys())
> ['ISU_SRT_CD',
 'ISU_ABBRV',
 'MKT_NM',
 'SECT_TP_NM',
 'TDD_CLSPRC',
 'FLUC_TP_CD',
 'CMPPREVDD_PRC',
 'FLUC_RT',
 'TDD_OPNPRC',
 'TDD_HGPRC',
 'TDD_LWPRC',
 'ACC_TRDVOL',
 'ACC_TRDVAL',
 'MKTCAP',
 'LIST_SHRS',
 'MKT_ID']
